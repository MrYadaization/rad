name: Build Linux

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.clang-format'
      - 'data/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.clang-format'
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.config_name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      build_type: "Release"
      matrix:
        compiler: [{cxx: "clang++", cc: "clang"}, {cxx: "g++-12", cc: "gcc-12"}]
        config_name: ["clang", "clang-onnx", "gcc", "gcc-onnx"]
        exclude:
          - config_name: ["gcc", "gcc-onnx"]
            compiler: {cxx: "clang++", cc: "clang"}
          - config_name: ["clang", "clang-onnx"]
            compiler: {cxx: "g++-12", cc: "gcc-12"}
    steps:
      - uses: actions/checkout@v4

      - name: Install clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: 15
        if: ${{ matrix.config.compiler.cc }} == "clang"

      - name: Cache dependencies
        uses: actions/cache@v4
        env:
          cache-name: rad_deps-linux
        with:
          path: ~/deps
          key: ${{ env.cache-name }}

      - name: Install dependencies
        shell: bash
        env:
          BUILD_TYPE: Release
          CC: gcc-12
          CXX: g++-12
        run: |
          if [ ! -d ~/deps ]; then
            mkdir ~/deps
            git clone https://github.com/marovira/rad_deps.git --branch 2.1.0 --depth 1
            cd ./rad_deps/linux
            tar --use-compress-program=unzstd -xvf onnxruntime.tar.zst -C ~/deps
            tar --use-compress-program=unzstd -xvf opencv.tar.zst -C ~/deps
            tar --use-compress-program=unzstd -xvf TBB.tar.zst -C ~/deps
            cd ../..

            git clone https://github.com/fmtlib/fmt.git --branch 10.2.0 --depth 1
            cmake -S fmt -B fmt/build -DCMAKE_CXX_STANDARD=20 -DFMT_INSTALL=ON -DFMT_TEST=OFF -DCMAKE_INSTALL_PREFIX=~/deps/fmt
            cd ./fmt/build
            make
            make install
            cd ../..
            git clone https://github.com/catchorg/Catch2.git --branch v3.5.1 --depth 1
            cmake -S Catch2 -B Catch2/build -DCMAKE_CXX_STANDARD=20 -DCATCH_INSTALL_DOCS=OFF -DCMAKE_INSTALL_PREFIX=~/deps/Catch2
            cd ./Catch2/build
            make
            make install
          fi

      - name: Build
        shell: bash
        env:
          BUILD_TYPE: Release
          CONFIG_TYPE: ${{ matrix.config.config_name }}
          CC: ${{ matrix.config.compiler.cc }}
          CXX: ${{ matrix.config.compiler.cxx }}
        run: |
          cmake --preset=$CONFIG_TYPE -DBUILD_SHARED_LIBS=OFF -DCMAKE_PREFIX_PATH=~/deps
          cd ./build
          make

      - name: Run tests
        shell: bash
        working-directory: ./build
        env:
          CC: ${{ matrix.config.compiler.cc }}
          CXX: ${{ matrix.config.compiler.cxx }}
        run: |
          make test
